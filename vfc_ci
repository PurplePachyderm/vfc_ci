#!/usr/bin/env python3

# This is the entry point of the Verificarlo CI command line interface, which is
# based on the click Python package. From here, 3 subcommands can be called :
# - setup : create a vfc_ci branch and workflow on the current Git repo
# - test : run and export test results according to the vfc_tests_config.json
# - serve : launch a Bokeh server to visualize run results

import click

################################################################################


    # "setup" subcommand

@click.command(
    help="""
    Create an automated workflow to execute Verificarlo tests.
    """
)

@click.argument(
    "git_host",
    type=click.Choice(["github", "gitlab"])
)


def setup(git_host):
    import ci.setup
    ci.setup.setup(git_host)



    # "test" subcommand

@click.command(
    help="""
    Execute a set of Verificarlo tests and export its results.
    """
)

@click.option(
    "-g", "--is-git-commit",
    is_flag=True,
    help="""
    When specified, the last Git commit of the local repository (working
    directory) will be fetched and associated with the run.
    """
)

@click.option(
    "-r", "--export-raw-results",
    is_flag=True,
    help="""
    Specify if an additional HDF5 file containing the raw results must be
    exported.
    """
)


def test(is_git_commit, export_raw_results):
    import ci.test
    ci.test.run(is_git_commit, export_raw_results)



    # "serve" subcommand

@click.command(
    help="""
    Start a server to visualize Verificarlo test results.
    """
)

@click.option(
    "-s", "--show",
    is_flag=True,
    help="""
    Specify if the report must be opened in the browser at server startup.
    """
)

@click.option(
    "-gd", "--git-directory",
    type=click.Path(exists=True, file_okay=False, dir_okay=True),
    help="""
    Path to a local Git repository. The report will be linked to the remote URL
    (GitHub or GitLab).
    """
)

@click.option(
    "-gu", "--git-url",
    type=str,
    help="""
    GitHub or GitLab repository URL. The report will be linked to this URL.
    """
)

@click.option(
    "-p", "--port",
    type=click.IntRange(min=0, max=65535),
    default=8080,
    help="""
    The port on which the server will run. Defaults to 8080.
    """
)

@click.option(
    "-a", "--allow-origin",
    type=str,
    default="localhost",
    help="""
    The origin (URL) from which the report will be accessible.
    Port number must not be specified. Defaults to 'localhost'.
    """
)

@click.option(
    "-l", "--logo",
    type=str,
    help="""
    Specify the URL of an image to be displayed in the report header.
    """
)


def serve(show, git_directory, git_url, port, allow_origin, logo):

    # git_directory and git_url are supposed to be exclusive
    # (click doesn't provide exclusive option groups so the validation is made
    # here manually. See : https://github.com/pallets/click/issues/257)
    if git_directory != None and git_url != None:
        raise click.UsageError("""
        '-gd' / '--git-directory' and '-gu' / '--git-url' are mutually
        exclusive. Please make sure to use at most one of them.
        """)

    import ci.serve
    ci.serve.serve(show, git_directory, git_url, port, allow_origin, logo)



###############################################################################


    # Main command group and entry point

@click.group(
    help = """
    A tool to configure, execute, automatize and visualize Verificarlo tests.
    """
)
def cli():
    pass


cli.add_command(setup)
cli.add_command(test)
cli.add_command(serve)


if __name__ == '__main__':
    cli()
