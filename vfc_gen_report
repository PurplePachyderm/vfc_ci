#!/usr/bin/env python3

# Look for and read all the run files in the current directory (ending with
# .vfcrun.hd5). It will then generate a "report.html" file.

import os
import json
import datetime

import pandas as pd

from bokeh.plotting import figure, show
from bokeh.resources import INLINE
from bokeh.embed import components

from jinja2 import Environment, FileSystemLoader


        # Helper functions

# From a timestamp, return the associated metadata as a Pandas serie
def get_metadata(metadata, timestamp):
    return metadata.loc[timestamp]

# From an array of timestamps, return an array of hashes/dates that can
# be used as the x serie of a bar/box plot
def gen_x_series(metadata, timestamps):
    x = []
    for i in range(0, len(timestamps)):
        row_metadata = get_metadata(metadata, timestamps[i])

        if row_metadata["is_git_commit"]:
            x.append(row_metadata["hash"])

        else:
            x.append(datetime.datetime.fromtimestamp(timestamps[i]).isoformat())



    return x



    # Plot functions

def gen_mu_plot(test, variable, backend, runs, mu):
    title = "Empirical average μ of \"" + test + ":" + variable + "\" over runs (" + backend + ")"
    p = figure(x_range=runs, plot_height=250, title=title)
    p.vbar(x=runs, top=mu, width=0.9)

    return p

def gen_sigma_plot(test, variable, backend, runs, sigma):
    title = "Standard deviation σ of \"" + test + ":" + variable + "\" over runs (" + backend + ")"
    p = figure(x_range=runs, plot_height=250, title=title)
    p.vbar(x=runs, top=sigma, width=0.9)

    return p

def gen_s2_plot(test, variable, backend, runs, s2):
    title = "Significant digits (base 2) of \"" + test + ":" + variable + "\" over runs (" + backend + ")"
    p = figure(x_range=runs, plot_height=250, title=title)
    p.vbar(x=runs, top=s2, width=0.9)

    return p

def gen_s10_plot(test, variable, backend, runs, s10):
    title = "Significant digits (base 10) of \"" + test + ":" + variable + "\" over runs (" + backend + ")"
    p = figure(x_range=runs, plot_height=250, title=title)
    p.vbar(x=runs, top=s10, width=0.9)

    return p

def gen_boxplot(
    test, variable, backend, runs,
    quantile10, quantile50, quantile90
):
    return


################################################################################


    # Read vfcrun files and generate data/metadata

print("Looking for vfcrun files...")

run_files = [ f for f in os.listdir(".") if f.endswith(".vfcrun.hd5") ]

if len(run_files) == 0:
    print("Could not find any vfcrun files in the directory. Exiting script.")
    exit(1)

# These are arrays of Pandas dataframes for now
metadata = []
data = []

for f in run_files:
    metadata.append(pd.read_hdf(f, "metadata"))
    data.append(pd.read_hdf(f, "data"))

metadata = pd.concat(metadata).sort_index()
data = pd.concat(data).sort_index()

data = data.sort_values("timestamp").sort_index()
data = data.groupby(["test", "variable", "vfc_backend"]).agg(lambda x: list(x))



    # Generate the Bokeh plots

print("[TODO] Generating plots...")

plots = {}

for index, row in data.iterrows():
    print(index)
    print(row)

    plots[index[0] + ":" + index[1] + ":" + index[2] + ":" + "mu"] =\
    gen_mu_plot(index[0], index[1], index[2], gen_x_series(metadata, row["timestamp"]), row["mu"])

    plots[index[0] + ":" + index[1] + ":" + index[2] + ":" + "sigma"] =\
    gen_sigma_plot(index[0], index[1], index[2], gen_x_series(metadata, row["timestamp"]), row["sigma"])

    plots[index[0] + ":" + index[1] + ":" + index[2] + ":" + "s2"] =\
    gen_s2_plot(index[0], index[1], index[2], gen_x_series(metadata, row["timestamp"]), row["s2"])

    plots[index[0] + ":" + index[1] + ":" + index[2] + ":" + "s10"] =\
    gen_s10_plot(index[0], index[1], index[2], gen_x_series(metadata, row["timestamp"]), row["s10"])



    # Render Jinja2 template

print("[TODO] Rendering report file...")

env = Environment(loader=FileSystemLoader("."))
env.globals["pd"] = pd

template = env.get_template("report.j2")

bokeh_js = INLINE.render_js()
bokeh_css = INLINE.render_css()

bokeh_script, plots = components(plots)

render = template.render(bokeh_js=bokeh_js,
                         bokeh_css=bokeh_css,
                         bokeh_script=bokeh_script,
                         metadata=metadata,
                         plots=plots)



    # Write file

with open("report.html", "w") as fh:
    fh.write(render)

print()
print("The report has been successfully written to \"report.html\".")
